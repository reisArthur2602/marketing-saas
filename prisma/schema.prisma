datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WhatsAppSession WhatsAppSession?
  templates       Template[]
  campaigns       Campaign[]
  exceptions      Exception[]
  keywords        Keyword[]
}

model WhatsAppSession {
  id        String @id @default(uuid())
  name      String
  sessionId String @unique

  connected Boolean  @default(false)
  qrCode    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Template {
  id        String     @id @default(uuid())
  name      String
  text      String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  campaigns Campaign[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Keyword {
  id        String     @id @default(uuid())
  word      String
  campaigns Campaign[]
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Exception {
  id          String     @id @default(uuid())
  description String?
  date        DateTime
  campaigns   Campaign[]
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Campaign {
  id         String   @id @default(uuid())
  name       String
  templateId String
  userId     String
  daysOfWeek Int[]
  startTime  DateTime
  endTime    DateTime
  isActive   Boolean  @default(true)

  template Template @relation(fields: [templateId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  exceptions Exception[]
  keywords   Keyword[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
